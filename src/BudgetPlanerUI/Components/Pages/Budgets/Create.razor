@page "/budgets/create"
@layout AppLayout
@rendermode InteractiveServer
@attribute [Authorize]

@inject ISnackbar Snackbar
@inject ILogger<Create> Logger
@inject IBudgetPlanerSdkService SdkService
@inject NavigationManager Navigation

<PageTitle>Create Budget - Budget Planner</PageTitle>

<div class="d-flex justify-space-between align-center mb-6">
    <div>
        <MudText Typo="Typo.h4" GutterBottom="true">Create New Budget</MudText>
        <MudText Typo="Typo.body1">Set up a new budget to track your financial goals.</MudText>
    </div>
    <MudButton Variant="Variant.Text" 
               Color="Color.Default" 
               StartIcon="@Icons.Material.Filled.ArrowBack"
               Href="/budgets">
        Back to Budgets
    </MudButton>
</div>

<MudCard>
    <MudCardContent>
        <EditForm Model="@Budget" OnValidSubmit="@CreateBudgetAsync">
            <DataAnnotationsValidator />
            
            <MudGrid>
                <!-- Budget Name -->
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="Budget.Name"
                                  Label="Budget Name"
                                  Required="true"
                                  HelperText="Enter a descriptive name for your budget"
                                  Variant="Variant.Outlined" />
                    <ValidationMessage For="@(() => Budget.Name)" />
                </MudItem>

                <!-- Total Budget Amount -->
                <MudItem xs="12" md="6">
                    <MudNumericField @bind-Value="Budget.TotalBudgetAmount"
                                     Label="Total Budget Amount"
                                     Required="true"
                                     Min="0"
                                     Step="0.01M"
                                     Culture="@CultureInfo.InvariantCulture"
                                     Format="C"
                                     HelperText="Enter the total amount for this budget"
                                     Variant="Variant.Outlined" />
                    <ValidationMessage For="@(() => Budget.TotalBudgetAmount)" />
                </MudItem>

                <!-- Budget Period Type -->
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="Budget.PeriodType" 
                               Label="Budget Period"
                               Required="true"
                               Variant="Variant.Outlined">
                        @foreach (var periodType in Enum.GetValues(typeof(BudgetPeriodType)).Cast<BudgetPeriodType>())
                        {
                            <MudSelectItem Value="periodType">@GetPeriodTypeDisplayName(periodType)</MudSelectItem>
                        }
                    </MudSelect>
                    <ValidationMessage For="@(() => Budget.PeriodType)" />
                </MudItem>

                <!-- Currency -->
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="Budget.CurrencyId" 
                               T="string"
                               Label="Currency"
                               Required="true"
                               Variant="Variant.Outlined">
                        @if (_isLoadingCurrencies)
                        {
                            <MudSelectItem Value="Loading" Disabled="true">Loading currencies...</MudSelectItem>
                        }
                        else
                        {
                            @foreach (var currency in _currencies)
                            {
                                <MudSelectItem Value="currency.Id">
                                    @currency.Name (@currency.Code)
                                </MudSelectItem>
                            }
                        }
                    </MudSelect>
                    <ValidationMessage For="@(() => Budget.CurrencyId)" />
                </MudItem>

                <!-- Start Date -->
                <MudItem xs="12" md="6">
                    <MudDatePicker @bind-Date="StartDate"
                                   Label="Start Date"
                                   Required="true"
                                   Variant="Variant.Outlined" />
                    <ValidationMessage For="@(() => Budget.StartDate)" />
                </MudItem>

                <!-- End Date -->
                <MudItem xs="12" md="6">
                    <MudDatePicker @bind-Date="Budget.EndDate"
                                   Label="End Date"
                                   Required="true"
                                   MinDate="Budget.StartDate"
                                   Variant="Variant.Outlined" />
                    <ValidationMessage For="@(() => Budget.EndDate)" />
                </MudItem>

                <!-- Status -->
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="Budget.Status" 
                               Label="Budget Status"
                               Required="true"
                               Variant="Variant.Outlined">
                        @foreach (var status in Enum.GetValues(typeof(BudgetStatus)).Cast<BudgetStatus>())
                        {
                            <MudSelectItem Value="status">@GetStatusDisplayName(status)</MudSelectItem>
                        }
                    </MudSelect>
                    <ValidationMessage For="@(() => Budget.Status)" />
                </MudItem>
            </MudGrid>

            <MudDivider Class="my-4" />

            <div class="d-flex justify-end gap-3">
                <MudButton Variant="Variant.Text" 
                           Color="Color.Default"
                           OnClick="@Cancel">
                    Cancel
                </MudButton>
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary"
                           ButtonType="ButtonType.Submit"
                           Disabled="@_isSubmitting"
                           StartIcon="@(_isSubmitting ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.Save)">
                    @if (_isSubmitting)
                    {
                        <MudText>Creating...</MudText>
                    }
                    else
                    {
                        <MudText>Create Budget</MudText>
                    }
                </MudButton>
            </div>
        </EditForm>
    </MudCardContent>
</MudCard>

@code {

    public BudgetRequest Budget = new()
    {
        StartDate = DateTime.Today.ToUniversalTime(),
        EndDate = DateTime.Today.AddMonths(1).ToUniversalTime(),
        Status = BudgetStatus.Active,
        PeriodType = BudgetPeriodType.Monthly,
        CurrencyId = ""
    };

    private string Loading = "loading";

    private DateTime? StartDate
    {
        get => Budget.StartDate;
        set
        {
            if (value.HasValue)
            {
                Budget.StartDate = value.Value;
                OnStartDateChanged(value.Value);
            }
        }
    }

    private List<CurrencyModel> _currencies = new();
    private bool _isSubmitting = false;
    private bool _isLoadingCurrencies = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrenciesAsync();
    }

    private async Task LoadCurrenciesAsync()
    {
        _isLoadingCurrencies = true;
        StateHasChanged();

        try
        {
            var currencies = await SdkService.Currencies.GetCurrenciesAsync();
            _currencies = currencies.ToList();
            
            if (_currencies.Any())
            {
                var defaultCurrency = _currencies.FirstOrDefault(c => c.Code == "MDL") ?? _currencies.First();
                Budget.CurrencyId = defaultCurrency.Id;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load currencies");
            Snackbar.Add("Failed to load currencies", Severity.Error);
        }
        finally
        {
            _isLoadingCurrencies = false;
            StateHasChanged();
        }
    }

    private async Task CreateBudgetAsync()
    {
        if (_isSubmitting) return;

        _isSubmitting = true;
        StateHasChanged();

        try
        {
            await SdkService.Budgets.CreateBudgetAsync(Budget);
            Snackbar.Add("Budget created successfully!", Severity.Success);
            Navigation.NavigateTo("/budgets");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to create budget");
            Snackbar.Add("Failed to create budget. Please try again.", Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/budgets");
    }

    private void OnStartDateChanged(DateTime newStartDate)
    {
        Budget.EndDate = Budget.PeriodType switch
        {
            BudgetPeriodType.Monthly => newStartDate.AddMonths(1).AddDays(-1).ToUniversalTime(),
            BudgetPeriodType.Quarterly => newStartDate.AddMonths(3).AddDays(-1).ToUniversalTime(),
            BudgetPeriodType.Yearly => newStartDate.AddYears(1).AddDays(-1).ToUniversalTime(),
            _ => newStartDate.AddMonths(1).AddDays(-1).ToUniversalTime()
        };
    }

    private string GetPeriodTypeDisplayName(BudgetPeriodType periodType)
    {
        return periodType switch
        {
            BudgetPeriodType.Monthly => "Monthly",
            BudgetPeriodType.Quarterly => "Quarterly (3 months)",
            BudgetPeriodType.Yearly => "Yearly (12 months)",
            _ => periodType.ToString()
        };
    }

    private string GetStatusDisplayName(BudgetStatus status)
    {
        return status switch
        {
            BudgetStatus.Active => "Active",
            BudgetStatus.Inactive => "Inactive",
            BudgetStatus.Completed => "Completed",
            _ => status.ToString()
        };
    }
} 