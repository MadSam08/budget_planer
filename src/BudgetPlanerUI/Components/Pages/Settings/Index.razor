@page "/settings"
@using Microsoft.AspNetCore.Authorization
@using BudgetPlaner.Contracts.Api.Profile
@using BudgetPlaner.UI.ApiClients
@rendermode InteractiveServer
@attribute [Authorize]
@inject IUserProfileService UserProfileService
@inject ISnackbar Snackbar

<PageTitle>Settings - Budget Planner</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Settings</MudText>
<MudText Typo="Typo.body1" Class="mb-6">Manage your profile settings.</MudText>

@if (isLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}
else
{
    <EditForm Model="profile" OnValidSubmit="UpdateProfileAsync">
        <DataAnnotationsValidator />
        <MudPaper Class="pa-6" Elevation="2">
            <MudTextField @bind-Value="profile.FullName" Label="Full Name" Variant="Variant.Outlined" Class="mb-4" />
            <ValidationMessage For="@(() => profile.FullName)" />

            <MudTextField @bind-Value="profile.PreferredCurrency" Label="Preferred Currency" Variant="Variant.Outlined" Class="mb-4" />
            <ValidationMessage For="@(() => profile.PreferredCurrency)" />

            <MudTextField T="decimal" @bind-Value="profile.MonthlySavingsGoal" Label="Monthly Savings Goal" Variant="Variant.Outlined" Class="mb-4" />
            <ValidationMessage For="@(() => profile.MonthlySavingsGoal)" />

            <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="me-2" />
                    Updating...
                }
                else
                {
                    Save Changes
                }
            </MudButton>
        </MudPaper>
    </EditForm>
}

@code {
    private UserProfileModel profile = new();
    private bool isLoading = true;
    private bool isSubmitting;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await UserProfileService.GetProfileAsync();
            profile = result ?? new UserProfileModel();
        }
        catch
        {
            Snackbar.Add("Failed to load profile", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateProfileAsync()
    {
        if (isSubmitting)
        {
            return;
        }

        isSubmitting = true;
        StateHasChanged();

        try
        {
            var success = await UserProfileService.UpdateProfileAsync(profile);
            if (success)
            {
                Snackbar.Add("Profile updated", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to update profile", Severity.Error);
            }
        }
        catch
        {
            Snackbar.Add("Failed to update profile", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
