@page "/register"
@layout MainLayout
@using Microsoft.AspNetCore.Components.Authorization
@inject IIdentityService IdentityService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Sign Up - Budget Planner</PageTitle>

<div class="container-fluid vh-100">
    <div class="row h-100">
        <div class="col-md-6 d-none d-md-flex align-items-center justify-content-center bg-success bg-gradient">
            <div class="text-center text-white p-5">
                <i class="bi bi-person-plus display-1 mb-4"></i>
                <h1 class="display-4 fw-bold mb-3">Join Budget Planner</h1>
                <p class="lead">Start your journey to financial freedom today. Create your account and take the first step towards better money management.</p>
                <div class="row mt-5">
                    <div class="col-4 text-center">
                        <i class="bi bi-calendar-check display-6"></i>
                        <p class="mt-2">Plan Ahead</p>
                    </div>
                    <div class="col-4 text-center">
                        <i class="bi bi-pie-chart display-6"></i>
                        <p class="mt-2">Analyze</p>
                    </div>
                    <div class="col-4 text-center">
                        <i class="bi bi-trophy display-6"></i>
                        <p class="mt-2">Achieve</p>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6 d-flex align-items-center justify-content-center">
            <div class="card shadow-lg" style="width: 100%; max-width: 450px;">
                <div class="card-body p-4">
                    <div class="text-center mb-4">
                        <h2 class="card-title">Create Account</h2>
                        <p class="text-muted">Sign up for your Budget Planner account</p>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            @successMessage
                        </div>
                    }

                                            <EditForm Model="@registerModel" method="post" OnValidSubmit="HandleSubmit" FormName="register">
                        <AntiforgeryToken />
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label for="email" class="form-label">Email address</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-envelope"></i>
                                </span>
                                <InputText type="email" 
                                       class="form-control" 
                                       id="email" 
                                       @bind-Value="registerModel.Email" 
                                       placeholder="Enter your email" />
                            </div>
                            <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-lock"></i>
                                </span>
                                <InputText type="@(showPassword ? "text" : "password")" 
                                       class="form-control" 
                                       id="password" 
                                       @bind-Value="registerModel.Password" 
                                       placeholder="Enter your password" />
                                <button type="button" 
                                        class="btn btn-outline-secondary" 
                                        @onclick="TogglePasswordVisibility">
                                    <i class="bi @(showPassword ? "bi-eye-slash" : "bi-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
                            <div class="form-text">
                                Password must be at least 6 characters long.
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-lock-fill"></i>
                                </span>
                                <InputText type="@(showConfirmPassword ? "text" : "password")" 
                                       class="form-control" 
                                       id="confirmPassword" 
                                       @bind-Value="registerModel.ConfirmPassword" 
                                       placeholder="Confirm your password" />
                                <button type="button" 
                                        class="btn btn-outline-secondary" 
                                        @onclick="ToggleConfirmPasswordVisibility">
                                    <i class="bi @(showConfirmPassword ? "bi-eye-slash" : "bi-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-danger" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox class="form-check-input" id="agreeTerms" @bind-Value="registerModel.AgreeToTerms" />
                            <label class="form-check-label" for="agreeTerms">
                                I agree to the <a href="/terms" target="_blank" class="text-decoration-none">Terms of Service</a> 
                                and <a href="/privacy" target="_blank" class="text-decoration-none">Privacy Policy</a>
                            </label>
                            <ValidationMessage For="@(() => registerModel.AgreeToTerms)" class="text-danger d-block" />
                        </div>

                        <div class="d-grid mb-3">
                            <button type="submit" 
                                    class="btn btn-success btn-lg" 
                                    disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Creating account...</span>
                                }
                                else
                                {
                                    <span>Create Account</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <hr class="my-4">

                    <div class="text-center">
                        <p class="mb-0">Already have an account? 
                            <a href="/login" class="text-decoration-none fw-bold">Sign in</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private bool showPassword = false;
    private bool showConfirmPassword = false;
    private bool isLoading = false;
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/");
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    private async Task HandleSubmit()
    {
        if (isLoading) return;

        errorMessage = "";
        successMessage = "";
        isLoading = true;

        try
        {
            var success = await IdentityService.SignUpAsync(new RegisterRequest
            {
                Email = registerModel.Email,
                Password = registerModel.Password
            });

            if (success)
            {
                successMessage = "Account created successfully! You can now sign in.";
                // Clear form
                registerModel = new RegisterModel();

                // Redirect to login after a short delay
                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Failed to create account. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Email address is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "You must agree to the Terms of Service and Privacy Policy")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the Terms of Service and Privacy Policy")]
        public bool AgreeToTerms { get; set; } = false;
    }
} 