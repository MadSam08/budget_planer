@using BudgetPlaner.Contracts.Api.Category
@using CategoryTypes = BudgetPlaner.Contracts.Api.Category.CategoryTypes

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 500px;">
            <MudText Typo="Typo.h6" GutterBottom="true">
                @(IsEdit ? "Edit Category" : "Add New Category")
            </MudText>

            <EditForm Model="@_category" OnValidSubmit="@SubmitAsync">
                <DataAnnotationsValidator/>

                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_category.Name"
                                      Label="Category Name"
                                      Required="true"
                                      HelperText="Enter a descriptive name for your category"
                                      Variant="Variant.Outlined"/>
                        <ValidationMessage For="@(() => _category.Name)"/>
                    </MudItem>

                    <MudItem xs="12">
                        <MudSelect T="CategoryTypes" @bind-Value="_category.CategoryTypes" Label="Category Type">
                            @foreach (var categoryTypes in Enum.GetValues(typeof(CategoryTypes)).Cast<CategoryTypes>())
                            {
                                <MudSelectItem Value="categoryTypes">@categoryTypes</MudSelectItem>
                            }
                        </MudSelect>
                        <ValidationMessage For="@(() => _category.CategoryTypes)"/>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudContainer>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="@Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="@SubmitAsync"
                   Disabled="@_isSubmitting">
            @if (_isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">@(IsEdit ? "Updating..." : "Creating...")</MudText>
            }
            else
            {
                <MudText>@(IsEdit ? "Update" : "Create")</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public CategoryRequest? Category { get; set; }
    [Parameter] public bool IsEdit { get; set; }
    
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private ILogger<CategoryDialog> Logger { get; set; } = null!;
    [Inject] private IBudgetPlanerSdkService SdkService { get; set; } = null!;

    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }

    private CategoryRequest _category = new() { Id = "", Name = "", CategoryTypes = CategoryTypes.Default };
    private bool _isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        if (Category != null && IsEdit)
        {
            _category = new CategoryRequest
            {
                Id = Category.Id,
                Name = Category.Name,
                CategoryTypes = Category.CategoryTypes
            };
        }
        else if (!IsEdit)
        {
            _category.Id = Guid.NewGuid().ToString();
        }
    }

    private async Task SubmitAsync()
    {
        if (string.IsNullOrWhiteSpace(_category.Name))
        {
            Snackbar.Add("Category name is required", Severity.Error);
            return;
        }

        _isSubmitting = true;
        StateHasChanged();

        try
        {
            bool success;
            if (IsEdit)
            {
                await SdkService.Categories.UpdateCategoryAsync(_category.Id, _category);
                success = true;
                Snackbar.Add("Category updated successfully", Severity.Success);
            }
            else
            {
                await SdkService.Categories.CreateCategoryAsync(_category);
                success = true;
                Snackbar.Add("Category created successfully", Severity.Success);
            }

            if (success)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        catch (UnauthorizedAccessException)
        {
            Logger.LogWarning("User is not authenticated");
            Snackbar.Add("Authentication required. Please log in.", Severity.Warning);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error {Action} category", IsEdit ? "updating" : "creating");
            Snackbar.Add($"Failed to {(IsEdit ? "update" : "create")} category", Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

} 